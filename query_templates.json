[
  {
    "id": "simple_filter_transformation",
    "prompt": "Bring {field} with {filter_field} = {filter_value} from {table} Table",
    "query": "INSERT INTO {target_table} ({target_field}) SELECT {field} FROM {table} WHERE {filter_field} = '{filter_value}'",
    "plan": [
      "1. Identify the source table {table}",
      "2. Identify the target field {field} to select",
      "3. Identify the filter condition {filter_field} = {filter_value}",
      "4. Determine if INSERT or UPDATE operation is needed based on target data",
      "5. For INSERT: Prepare INSERT query to add the filtered data",
      "6. For UPDATE: Prepare UPDATE query with subquery to update the target table",
      "7. Execute the operation to update the target table"
    ]
  },
  {
    "id": "multi_table_conditional",
    "prompt": "Check {field1} in {table1} and IF matching entries found, bring {field2} from {table1} ELSE check in {table2} and bring {field2} ELSE bring from {table3}",
    "query": "UPDATE {target_table} SET {target_field} = CASE WHEN EXISTS (SELECT 1 FROM {table1} WHERE {key_field} = {target_table}.{key_field}) THEN (SELECT {field2} FROM {table1} WHERE {key_field} = {target_table}.{key_field}) WHEN EXISTS (SELECT 1 FROM {table2} WHERE {key_field} = {target_table}.{key_field}) THEN (SELECT {field2} FROM {table2} WHERE {key_field} = {target_table}.{key_field}) ELSE (SELECT {field2} FROM {table3} WHERE {key_field} = {target_table}.{key_field}) END",
    "plan": [
      "1. Identify the key field {field1} to check across tables",
      "2. Identify the field {field2} to retrieve",
      "3. Identify the three tables to check in sequence",
      "4. Create a CASE expression with EXISTS checks to implement the conditional logic",
      "5. Prepare an UPDATE statement to update the target field"
    ]
  },
  {
    "id": "conditional_value_assignment",
    "prompt": "If {field1} in ({values1}) then '{result1}' ELSE IF {field1} in ({values2}) then '{result2}' ELSE '{default_result}'",
    "query": "UPDATE {target_table} SET {target_field} = CASE WHEN {field1} IN ({values1}) THEN '{result1}' WHEN {field1} IN ({values2}) THEN '{result2}' WHEN {field1} IN ({values3}) THEN '{result3}' ELSE '{default_result}' END",
    "plan": [
      "1. Identify the field {field1} to check",
      "2. Identify the sets of values to check against",
      "3. Identify the result values for each condition",
      "4. Create a CASE expression with multiple conditions",
      "5. Prepare the UPDATE statement to set the target field"
    ]
  },
  {
    "id": "join_segment_data",
    "prompt": "Join {field1} from {segment1} with {field2} from {segment2} and Bring {field3} for conditions",
    "query": "INSERT INTO {target_table} ({target_fields}) SELECT t1.{field1}, t2.{field3} FROM {segment1_table} t1 JOIN {segment2_table} t2 ON t1.{field1} = t2.{field2} WHERE t2.{filter_field} IN ({filter_values})",
    "plan": [
      "1. Identify the segment tables to join",
      "2. Identify the join fields between segments",
      "3. Identify additional filter conditions",
      "4. Prepare a JOIN query between the segment tables",
      "5. Apply appropriate filters",
      "6. Determine if INSERT or UPDATE operation is needed based on target data",
      "7. Execute the operation to update the target table"
    ]
  },
  {
    "id": "date_extraction",
    "prompt": "Add a new column named {new_column} to the target table and extract {date_part} from {date_field}",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = substr({date_field}, {start_pos}, {length})",
    "plan": [
      "1. Identify the target table to modify",
      "2. Identify the new column name to add",
      "3. Identify the source field to extract data from",
      "4. Determine the extraction logic based on the part to extract",
      "5. Add the new column to the target table",
      "6. Update the new column with the extracted data"
    ]
  },
  {
    "id": "date_formatting",
    "prompt": "Add a new column for {date_type} from the {date_field}",
    "query": "ALTER TABLE {target_table} ADD COLUMN {target_field} TEXT; UPDATE {target_table} SET {target_field} = CASE WHEN '{date_type}' = 'day' THEN substr({date_field}, 7, 2) WHEN '{date_type}' = 'month' THEN substr({date_field}, 5, 2) WHEN '{date_type}' = 'year' THEN substr({date_field}, 1, 4) WHEN '{date_type}' = 'quarter' THEN CASE WHEN CAST(substr({date_field}, 5, 2) AS INTEGER) BETWEEN 1 AND 3 THEN 'Q1' WHEN CAST(substr({date_field}, 5, 2) AS INTEGER) BETWEEN 4 AND 6 THEN 'Q2' WHEN CAST(substr({date_field}, 5, 2) AS INTEGER) BETWEEN 7 AND 9 THEN 'Q3' ELSE 'Q4' END END",
    "plan": [
      "1. Identify the date field to format",
      "2. Identify the type of date information to extract (day, month, year, quarter)",
      "3. Add a new column to store the extracted information",
      "4. Create appropriate SQLite date extraction expressions",
      "5. Update the new column with the formatted date information"
    ]
  },
  {
    "id": "get_current_date",
    "prompt": "Add a new column with system date",
    "query": "ALTER TABLE {target_table} ADD COLUMN {target_field} TEXT; UPDATE {target_table} SET {target_field} = date('now')",
    "plan": [
      "1. Identify the target table",
      "2. Add a new column to store the system date",
      "3. Update the column with the current date using SQLite's date function"
    ]
  },
  {
    "id": "clean_special_characters",
    "prompt": "Remove special characters from {field}",
    "query": "UPDATE {target_table} SET {field} = regexp_replace({field}, '[^a-zA-Z0-9 ]', '', 'g')",
    "plan": [
      "1. Identify the field to clean",
      "2. Use regular expressions to remove special characters",
      "3. Update the field with the cleaned text"
    ]
  },
  {
    "id": "delete_column",
    "prompt": "Delete column {column} from the target table",
    "query": "CREATE TABLE temp_table AS SELECT * FROM {target_table}; DROP TABLE {target_table}; CREATE TABLE {target_table} AS SELECT {columns_except_deleted} FROM temp_table; DROP TABLE temp_table",
    "plan": [
      "1. Identify the column to delete",
      "2. Create a temporary table with all data from the target table",
      "3. Drop the original table",
      "4. Recreate the table without the deleted column",
      "5. Drop the temporary table"
    ]
  },
  {
    "id": "conditional_update",
    "prompt": "If the value of {field} starts with '{prefix}', then set {field} to '{new_value}'",
    "query": "UPDATE {target_table} SET {field} = '{new_value}' WHERE {field} LIKE '{prefix}%'",
    "plan": [
      "1. Identify the field to check and update",
      "2. Identify the prefix to check for",
      "3. Identify the new value to set",
      "4. Create an UPDATE statement with a LIKE condition"
    ]
  },
  {
    "id": "string_length_calculation",
    "prompt": "Calculate the length of {field1} and put it in {field2} and add a new column {new_column} if length > {threshold} set '{value1}' else '{value2}'",
    "query": "UPDATE {target_table} SET {field2} = length({field1}); ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = CASE WHEN length({field1}) > {threshold} THEN '{value1}' ELSE '{value2}' END",
    "plan": [
      "1. Identify the source field to calculate length on",
      "2. Identify the target field to store the length",
      "3. Create a new column for the conditional value",
      "4. Update the length field with the calculated length",
      "5. Update the new column based on the length comparison"
    ]
  },
  {
    "id": "delete_values",
    "prompt": "Delete the values in the column {column}",
    "query": "UPDATE {target_table} SET {column} = NULL",
    "plan": [
      "1. Identify the column to clear values from",
      "2. Update the column setting all values to NULL"
    ]
  },
  {
    "id": "copy_from_segment",
    "prompt": "Bring {field} from {table} for the {reference_field} which you have got in Transformation {number}",
    "query": "INSERT INTO {target_table} ({target_field}) SELECT t2.{field} FROM {reference_table} t1 JOIN {table} t2 ON t1.{reference_field} = t2.{reference_field}",
    "plan": [
      "1. Identify the field to bring from the source table",
      "2. Identify the reference field to join on",
      "3. Identify the reference table from the previous transformation",
      "4. Prepare a JOIN query to get the data",
      "5. Execute the operation to update the target table"
    ]
  },
  {
    "id": "nullcheck_with_default",
    "prompt": "If {field} is null then try to bring from {table2} even if {table2} has null value, then hardcode as '{default_value}'",
    "query": "UPDATE {target_table} SET {field} = CASE WHEN {target_table}.{field} IS NULL THEN COALESCE((SELECT {field} FROM {table2} WHERE {key_field} = {target_table}.{key_field}), '{default_value}') ELSE {target_table}.{field} END",
    "plan": [
      "1. Identify the field to check for NULL",
      "2. Identify the fallback table to check",
      "3. Identify the default value to use if both are NULL",
      "4. Create a CASE expression with COALESCE to implement the logic",
      "5. Prepare the UPDATE statement"
    ]
  }
]